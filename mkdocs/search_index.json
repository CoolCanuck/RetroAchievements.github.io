{
    "docs": [
        {
            "location": "/", 
            "text": "Here you will find info on how to develop RetroAchievements.", 
            "title": "Home"
        }, 
        {
            "location": "/Achievement-Creation/", 
            "text": "Welcome to the world of Achievement Creation!\n\n\nFirst Steps\n\n\nBefore start ensure you have an RA emulator from retroachievements.org/download.php first and retroachievements.org/createaccount.php so you can log in using the emulator.\n\n\nIn this guide we'll be using RAGens to demonstrate, and the game \nSonic the Hedgehog\n. You can use whatever you like, but I'll refer to RAGens as the emulator I'm using; the same applies for the other emulators.\n\n\nTo begin, run the RAGens executable, and login when prompted. Next, use File -\n Open and select whatever ROM you would like to find achievements for.\n\n\nMemory Inspector\n\n\nYou should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under \nRetroAchievements\n in the menu. We'll be dealing with the \nMemory Inspector\n first:\n\n\n\n\nThe Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. To start or restart a test, click \nNew 8-bit Test\n near the top middle.\n\n\nTo keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:\n\n\n\n\n\n\nLoad the ROM and start a new game.\n\n\n\n\n\n\nReset the memory dialog: click \nNew 8-bit Test\n.\n\n\n\n\n\n\nReturn to the game and change the number of rings in memory. For example, collect a ring.\n\n\n\n\n\n\nIn the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol \n). We select this, then hit \nFilter\n.\n\n\n\n\n\n\nEach time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be \n0xfe20\n.\n\n\nNote\n: Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use \n=\n), or values that are different (use 'not equal', symbol \n!=\n).\n\n\nNote\n: There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post in these forums, or see the note at the end of this post. There are plenty of people who will be very happy to help!!\n\n\nTip\n: if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!\n\n\nWhen you've found an address you're happy with, you can write a short note for what it is and hit \nSave Note\n, this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.\n\n\nAchievement Sets\n\n\nOK so the memory location for the number of rings is stored at \n0xfe20\n (note to a non-programmer, we're dealing in hexadecimal which can be daunting, but don't worry, essentially its just letters instead of numbers), and not forgetting \n0x\n at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using \nSave Note\n. We now want to create a new achievement. We will now move to the \nAchievement Set\n dialog:\n\n\n\n\nHere we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).\n\n\nIn the Achievements dialog, click \nLocal Achievements\n (top left), then \nAdd New Achievement\n (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the \nAchievement Editor\n dialog.\n\n\nAchievement Editor\n\n\nThis is how it looks:\n\n\n\n\nThis is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.\n\n\nLets say we want to add an achievement for collecting a certain number of rings. Lets say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (you can upload a new one, I'll just select the gold trophy badge (00136) for now), we need to fill out Requirements. I have one requirement, \nthat the number of rings is at least 15\n. Next click is \nAdd New Requirement\n.\n\n\nClicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?', what this says is, 'please check that this value of memory is equal to the value 10.' (10 is just a default value). When we clicked create, the default memory value will be whatever value you last left in the memory dialog.\n\n\nNext we will change these values to the following:\n\n\n\n\nSize: \n16-bit\n\n\nMemory: \n0xfe20\n\n\nCmp: \n=\n - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having \nexactly\n 15 rings.\n\n\nType: \nValue\n - we're comparing this memory value to a fixed value: 15\n\n\nSize: \nEmpty\n - this is only relevant when comparing memory to memory\n\n\nMem/Val: \n15\n - the number of rings required: the value we are comparing the memory to\n\n\nHit Count: \n0\n - ignore this for now, its useful for when something needs to happen a certain number of times\n\n\n\n\nWith that set, we don't have any more conditions to add, so we return to the \nAchievements Dialog\n. To be safe, we should save our progress by hitting \nSave Local\n! This saves everything to file locally to ensure that we won't lose any progress. \n\n\nTesting the Achievement\n\n\nWe can now 'activate' this achievement locally by hitting \nActivate\n on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!\n\n\n\n\nIf we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!\n\n\n\n\nOK, the Achievement works. Now What?\n\n\nOnce we have tested that the achievement works locally, there is a two-step commit process that's (mostly) pain-free! First in the Achievements Dialog, we select our achievement and press 'Commit Selected', and agree to the dialog. This will push our achievement to the server and store it under 'Unofficial User-submitted Achievements'. Note that our achievement still exists in this dialog, it's just moved to a different tab.\n\n\nNote\n: (The idea of this middle-part is that it would be a holding ground where users can vote on the best achievements before they get pushed to the 'Core Achievement' set. At the moment anyone can simply promote an achievement to the core set, but in the future this might be an super-user privilege (in case of spam/abuse etc).)\n\n\nFinally, to push our achievement to the Core Achievement set, and allow everybody to download achievements, we select 'Unofficial User-submitted Achievements' at the top left of this dialog, select our achievement, then click 'Promote to Core', and accept the dialog. And voila! You have just submitted your first achievement!\n\n\nNaturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.\n\n\nExtra Stuff\n\n\nWhen finding addresses, there is potentially a bit of a shortcut. PAR files can come in very useful, see bsfree.shadowflareindustries.com/?s=11\nd=5 for examples of PAR codes. PAR codes are commonly used to force an address in RAM to stay a certain value. The addresses are easily decoded: if it begins 'ff', that means 'keep a value stuck in this address'. The next four digits are the address, and after the colon is the value that should be used. For example:\n\n\nFFFE20:00C8\n\n\nThis code is for Sonic 1, and the Action Replay would ensure that the value 00c8 is stuck in the address 0xfe20. This causes sonic to permanently have (hex)c8 rings, which is 200.\n\n\nNote that it is only Action Replay (PAR) codes that will be useful to get addresses for use with RetroAchievements: Game Genie codes modify ROM rather than RAM and aren't what we're looking for.", 
            "title": "Achievement Creation"
        }, 
        {
            "location": "/Achievement-Creation/#first-steps", 
            "text": "Before start ensure you have an RA emulator from retroachievements.org/download.php first and retroachievements.org/createaccount.php so you can log in using the emulator.  In this guide we'll be using RAGens to demonstrate, and the game  Sonic the Hedgehog . You can use whatever you like, but I'll refer to RAGens as the emulator I'm using; the same applies for the other emulators.  To begin, run the RAGens executable, and login when prompted. Next, use File -  Open and select whatever ROM you would like to find achievements for.", 
            "title": "First Steps"
        }, 
        {
            "location": "/Achievement-Creation/#memory-inspector", 
            "text": "You should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under  RetroAchievements  in the menu. We'll be dealing with the  Memory Inspector  first:   The Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. To start or restart a test, click  New 8-bit Test  near the top middle.  To keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:    Load the ROM and start a new game.    Reset the memory dialog: click  New 8-bit Test .    Return to the game and change the number of rings in memory. For example, collect a ring.    In the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol  ). We select this, then hit  Filter .    Each time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be  0xfe20 .  Note : Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use  = ), or values that are different (use 'not equal', symbol  != ).  Note : There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post in these forums, or see the note at the end of this post. There are plenty of people who will be very happy to help!!  Tip : if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!  When you've found an address you're happy with, you can write a short note for what it is and hit  Save Note , this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.", 
            "title": "Memory Inspector"
        }, 
        {
            "location": "/Achievement-Creation/#achievement-sets", 
            "text": "OK so the memory location for the number of rings is stored at  0xfe20  (note to a non-programmer, we're dealing in hexadecimal which can be daunting, but don't worry, essentially its just letters instead of numbers), and not forgetting  0x  at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using  Save Note . We now want to create a new achievement. We will now move to the  Achievement Set  dialog:   Here we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).  In the Achievements dialog, click  Local Achievements  (top left), then  Add New Achievement  (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the  Achievement Editor  dialog.", 
            "title": "Achievement Sets"
        }, 
        {
            "location": "/Achievement-Creation/#achievement-editor", 
            "text": "This is how it looks:   This is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.  Lets say we want to add an achievement for collecting a certain number of rings. Lets say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (you can upload a new one, I'll just select the gold trophy badge (00136) for now), we need to fill out Requirements. I have one requirement,  that the number of rings is at least 15 . Next click is  Add New Requirement .  Clicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?', what this says is, 'please check that this value of memory is equal to the value 10.' (10 is just a default value). When we clicked create, the default memory value will be whatever value you last left in the memory dialog.  Next we will change these values to the following:   Size:  16-bit  Memory:  0xfe20  Cmp:  =  - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having  exactly  15 rings.  Type:  Value  - we're comparing this memory value to a fixed value: 15  Size:  Empty  - this is only relevant when comparing memory to memory  Mem/Val:  15  - the number of rings required: the value we are comparing the memory to  Hit Count:  0  - ignore this for now, its useful for when something needs to happen a certain number of times   With that set, we don't have any more conditions to add, so we return to the  Achievements Dialog . To be safe, we should save our progress by hitting  Save Local ! This saves everything to file locally to ensure that we won't lose any progress.", 
            "title": "Achievement Editor"
        }, 
        {
            "location": "/Achievement-Creation/#testing-the-achievement", 
            "text": "We can now 'activate' this achievement locally by hitting  Activate  on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!   If we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!", 
            "title": "Testing the Achievement"
        }, 
        {
            "location": "/Achievement-Creation/#ok-the-achievement-works-now-what", 
            "text": "Once we have tested that the achievement works locally, there is a two-step commit process that's (mostly) pain-free! First in the Achievements Dialog, we select our achievement and press 'Commit Selected', and agree to the dialog. This will push our achievement to the server and store it under 'Unofficial User-submitted Achievements'. Note that our achievement still exists in this dialog, it's just moved to a different tab.  Note : (The idea of this middle-part is that it would be a holding ground where users can vote on the best achievements before they get pushed to the 'Core Achievement' set. At the moment anyone can simply promote an achievement to the core set, but in the future this might be an super-user privilege (in case of spam/abuse etc).)  Finally, to push our achievement to the Core Achievement set, and allow everybody to download achievements, we select 'Unofficial User-submitted Achievements' at the top left of this dialog, select our achievement, then click 'Promote to Core', and accept the dialog. And voila! You have just submitted your first achievement!  Naturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.", 
            "title": "OK, the Achievement works. Now What?"
        }, 
        {
            "location": "/Achievement-Creation/#extra-stuff", 
            "text": "When finding addresses, there is potentially a bit of a shortcut. PAR files can come in very useful, see bsfree.shadowflareindustries.com/?s=11 d=5 for examples of PAR codes. PAR codes are commonly used to force an address in RAM to stay a certain value. The addresses are easily decoded: if it begins 'ff', that means 'keep a value stuck in this address'. The next four digits are the address, and after the colon is the value that should be used. For example:  FFFE20:00C8  This code is for Sonic 1, and the Action Replay would ensure that the value 00c8 is stuck in the address 0xfe20. This causes sonic to permanently have (hex)c8 rings, which is 200.  Note that it is only Action Replay (PAR) codes that will be useful to get addresses for use with RetroAchievements: Game Genie codes modify ROM rather than RAM and aren't what we're looking for.", 
            "title": "Extra Stuff"
        }, 
        {
            "location": "/Editing-the-Wiki/", 
            "text": "The wiki needs to be written in a certain format in order to convert cleanly to the pretty static pages with mkdocs. The reason for this is mkdocs uses python markdown and github uses github flavoured markdown, so there are some minor issues of formatting that will need to be addressed.\n\n\nHeadings\n\n\nThe headings (defined by \n#\n) should follow a natural progression of the hierarchy of the page contents. You cannot have two title headings otherwise they won't show up on the table of contents on the right side of the page\n\n\nE.G.\n\n\n# Title\n## Main heading one\n### Sub Heading one\n### Sub heading two\n## Main heading two\n\n\n\n\netc.\n\n\nLinks\n\n\nLinks should follow this syntax\n\n\n[Link](path to link)\n\n\n\n\nIf it is a link to another wiki page it should be a relative path:\n\n\n[First Installation](First-Installation)\n\n\n\n\nNOT\n\n\n[First Installation](https://github.com/retropie/retropie-setup/wiki/First-Installation)\n\n\n\n\nCode Blocks\n\n\nCode blocks should be created with backticks: 1 set for inline code highlighting and 3 for code blocks\n\n\nInline code highlights:\n\n\n`inline`\n\n\nwill render as:\n\ninline\n \n\n\nCode blocks:\n\n\n```\n\n\ncode block\n\n\n```\n \n\n\nwill render as \n\n\ncode block\n\n\n\n\nBullets\n\n\nIf you are doing subnests on bullet points you need 4 spaces on the sub bullet, not two more explanation \nHERE\n:\n\n\n- Bullet one\n    - Bullet sub\n````\nIt should render like this:\n\n- Bullet one\n    - Bullet sub\n\n### Numbering\n\nNumbers will only order properly if in a listed sequence. If that sequence is broken by paragraphs then the numbering will restart.\n\nNumbered lists are formatted as follows:\n\n\n\n\n\n\nitem 1\n\n\nitem 2\n\n\nitem 3\n\n\nitem 4\n\n\n\n\nIf they are not in a listed sequence then you can just label the numbers manually with:\n\n\n\n\nStep 1.\nStep 2.\nStep 3.\n\n\netc. or you can just use bullet points if the numbers really aren't that important.\n\n### Symbols/Emojis\n\nEmojis are not supported with python markdown and should be avoided. Rather important text should be bolded or italicised\n\nThe following in github:\n\n\n\n\n:exclamation:\n\n\nrenders to :exclamation:\n\nbut in the generated docs it will show\n\n\n\n\n:exclamation:\n\n\n\n\nThis is a comment inside the `.md` file and isn't rendered:\n\n\n\n\n```", 
            "title": "Editing the Wiki"
        }, 
        {
            "location": "/Editing-the-Wiki/#headings", 
            "text": "The headings (defined by  # ) should follow a natural progression of the hierarchy of the page contents. You cannot have two title headings otherwise they won't show up on the table of contents on the right side of the page  E.G.  # Title\n## Main heading one\n### Sub Heading one\n### Sub heading two\n## Main heading two  etc.", 
            "title": "Headings"
        }, 
        {
            "location": "/Editing-the-Wiki/#links", 
            "text": "Links should follow this syntax  [Link](path to link)  If it is a link to another wiki page it should be a relative path:  [First Installation](First-Installation)  NOT  [First Installation](https://github.com/retropie/retropie-setup/wiki/First-Installation)", 
            "title": "Links"
        }, 
        {
            "location": "/Editing-the-Wiki/#code-blocks", 
            "text": "Code blocks should be created with backticks: 1 set for inline code highlighting and 3 for code blocks  Inline code highlights:  `inline`  will render as: inline    Code blocks:  ```  code block  ```    will render as   code block", 
            "title": "Code Blocks"
        }, 
        {
            "location": "/Editing-the-Wiki/#bullets", 
            "text": "If you are doing subnests on bullet points you need 4 spaces on the sub bullet, not two more explanation  HERE :  - Bullet one\n    - Bullet sub\n````\nIt should render like this:\n\n- Bullet one\n    - Bullet sub\n\n### Numbering\n\nNumbers will only order properly if in a listed sequence. If that sequence is broken by paragraphs then the numbering will restart.\n\nNumbered lists are formatted as follows:   item 1  item 2  item 3  item 4   If they are not in a listed sequence then you can just label the numbers manually with:  Step 1.\nStep 2.\nStep 3.  etc. or you can just use bullet points if the numbers really aren't that important.\n\n### Symbols/Emojis\n\nEmojis are not supported with python markdown and should be avoided. Rather important text should be bolded or italicised\n\nThe following in github:  :exclamation:  renders to :exclamation:\n\nbut in the generated docs it will show  :exclamation:  \n\nThis is a comment inside the `.md` file and isn't rendered:  ```", 
            "title": "Bullets"
        }, 
        {
            "location": "/about/", 
            "text": "Check here: http://retroachievements.org", 
            "title": "About"
        }
    ]
}